/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/boid.js":
/*!************************!*\
  !*** ./src/js/boid.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"COUNT_ID\": () => (/* binding */ COUNT_ID),\n/* harmony export */   \"Boid\": () => (/* binding */ Boid)\n/* harmony export */ });\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! victor */ \"./node_modules/victor/index.js\");\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(victor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\n/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./direction */ \"./src/js/direction.js\");\n\n\n\nvar COUNT_ID = 0;\nvar Boid = function Boid(global_position_vector, direction_vector) {\n  var _this = this;\n\n  this.id = COUNT_ID++;\n  this.pos_vec = global_position_vector;\n  this.direction = new _direction__WEBPACK_IMPORTED_MODULE_2__.Direction(direction_vector);\n  this.rotation_speed = _constants__WEBPACK_IMPORTED_MODULE_1__.BOID_DEFAULT_ROTATION_SPEED;\n  this.speed_vec = new (victor__WEBPACK_IMPORTED_MODULE_0___default())(_constants__WEBPACK_IMPORTED_MODULE_1__.BOID_DEFAULT_SPEED_X, _constants__WEBPACK_IMPORTED_MODULE_1__.BOID_DEFAULT_SPEED_Y);\n  this.color = \"#000000\";\n  this.shape = _constants__WEBPACK_IMPORTED_MODULE_1__.SHAPE_TRIANGLE;\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boid.js?");

/***/ }),

/***/ "./src/js/boidcanvas.js":
/*!******************************!*\
  !*** ./src/js/boidcanvas.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Boidcanvas\": () => (/* binding */ Boidcanvas)\n/* harmony export */ });\n/* harmony import */ var _boidiverse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boidiverse */ \"./src/js/boidiverse.js\");\n/* harmony import */ var _boidcontroller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./boidcontroller */ \"./src/js/boidcontroller.js\");\n\n\nvar Boidcanvas = function Boidcanvas(canvas_element) {\n  this.init = function (canvas_size) {\n    _this.canvas.width = canvas_size.x;\n    _this.canvas.height = canvas_size.y;\n    _this.boidiverse = new _boidiverse__WEBPACK_IMPORTED_MODULE_0__.Boidiverse();\n\n    _this.boidiverse.init(canvas_size.x, canvas_size.y);\n\n    _this.boidcontroller = new _boidcontroller__WEBPACK_IMPORTED_MODULE_1__.Boidcontroller(_this.boidiverse);\n\n    _this.loop();\n  };\n\n  var _this = this;\n\n  this.canvas = canvas_element;\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.stop = false;\n\n  this.loop = function () {\n    var lastTime;\n    var requiredElapsed = 0;\n    var totalFrames = 0;\n    var startTime;\n\n    var loopIt = function loopIt(now) {\n      if (startTime === undefined) {\n        startTime = now;\n      }\n\n      if (_this.stop) {\n        return;\n      }\n\n      requestAnimationFrame(loopIt);\n\n      if (!lastTime) {\n        lastTime = now;\n      }\n\n      var elapsed = now - lastTime;\n\n      if (elapsed > requiredElapsed) {\n        var timedelta = elapsed / 1000;\n\n        _this.updateBounds();\n\n        _this.clearCanvas(); //TODO\n\n\n        _this.boidcontroller.update(timedelta, _this.ctx);\n\n        _this.boidiverse.draw(_this.ctx);\n\n        lastTime = now;\n        var fps = totalFrames / ((now - startTime) / 1000); //console.log(totalFrames + \" \" + now + \" \"+startTime)\n\n        totalFrames++;\n\n        _this.drawFPS(_this.ctx, fps);\n      }\n    };\n\n    loopIt();\n  };\n\n  this.updateBounds = function () {\n    var w = window.innerWidth;\n    var h = window.innerHeight;\n\n    if (w !== _this.canvas.width || h !== _this.canvas.height) {\n      _this.canvas.width = w;\n      _this.canvas.height = h;\n\n      _this.boidiverse.boidstorage.buildChunks(w, h);\n    }\n  };\n\n  this.clearCanvas = function () {\n    _this.ctx.globalCompositeOperation = 'destination-over';\n\n    _this.ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height); // clear canvas\n\n  };\n\n  this.drawFPS = function (ctx, fps) {\n    ctx.fillText(\"fps: \" + Math.round(fps), 5, 30);\n  };\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boidcanvas.js?");

/***/ }),

/***/ "./src/js/boidcontroller.js":
/*!**********************************!*\
  !*** ./src/js/boidcontroller.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Boidcontroller\": () => (/* binding */ Boidcontroller)\n/* harmony export */ });\n/* harmony import */ var _boid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boid */ \"./src/js/boid.js\");\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! victor */ \"./node_modules/victor/index.js\");\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(victor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _drawer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drawer */ \"./src/js/drawer.js\");\n/* harmony import */ var _parameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parameters */ \"./src/js/parameters.js\");\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./misc */ \"./src/js/misc.js\");\n/* harmony import */ var _boidiverse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./boidiverse */ \"./src/js/boidiverse.js\");\n/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./direction */ \"./src/js/direction.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\nvar Boidcontroller = function Boidcontroller(boidiverse) {\n  var _this = this;\n\n  this.boidiverse = boidiverse;\n\n  this.update = function (timeDelta, ctx) {\n    _this.boidiverse.boidstorage.forEachBoid(function (c_boid) {\n      var boid = c_boid.b;\n\n      var nearBoids = _this.boidiverse.boidstorage.getBoidsInNeighborhood(boid.id, _parameters__WEBPACK_IMPORTED_MODULE_3__.DEBUG_MAX_CHECK_DISTANCE, ctx);\n\n      var swarmBoids = nearBoids.filter(function (distant_boid) {\n        return distant_boid.distance <= _parameters__WEBPACK_IMPORTED_MODULE_3__.DEBUG_MAX_SWARM_DISTANCE;\n      });\n      var toNearBoids = swarmBoids.filter(function (distant_boid) {\n        return distant_boid.distance <= _parameters__WEBPACK_IMPORTED_MODULE_3__.DEBUG_TO_NEAR_DISTANCE;\n      }); //Flugrichtung bestimmen\n      // -> Alignment\n\n      _this.adjustFlightDirection(boid, swarmBoids, timeDelta); //Geschwindigkeit Anpassen\n      // -> Separation of Boids\n\n\n      _this.adjustFlightSpeed(boid, toNearBoids, timeDelta); //_this.moveInWaves(boid, ctx);\n      //Bewegen & in grenzen bleiben\n\n\n      _this.moveBoidForward(c_boid, timeDelta);\n\n      _this.keepBoidInsideBounds(c_boid.b, _this.boidiverse.boidstorage.bounds_vec); //_this.keepBoidInsideBounds_bounce(c_boid.b, _this.boidiverse.boidstorage.bounds_vec, timeDelta, ctx);\n\n    });\n  };\n\n  this.adjustFlightDirection = function (boid, boidsToAdjust, timeDelta) {\n    var direction_vec_sum = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(0, 0);\n\n    var _iterator = _createForOfIteratorHelper(boidsToAdjust),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var distant_boid = _step.value;\n        direction_vec_sum.add(distant_boid.b.direction.getDirection_vector());\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (!(direction_vec_sum.x === 0 && direction_vec_sum.y === 0)) {\n      _this.turnBoid(boid, direction_vec_sum, timeDelta);\n    }\n  };\n\n  this.adjustFlightSpeed = function (boid, boidsToAdjust, timeDelta) {\n    var centroid = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(0, 0);\n    var destination = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(0, 0);\n\n    if (boidsToAdjust.length > 0) {\n      var _iterator2 = _createForOfIteratorHelper(boidsToAdjust),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var distant_boid = _step2.value;\n          centroid.add(distant_boid.b.pos_vec);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      centroid.divide(new (victor__WEBPACK_IMPORTED_MODULE_1___default())(boidsToAdjust.length, boidsToAdjust.length));\n      destination.add(boid.pos_vec).subtract(centroid);\n      destination.rotate(-1 * boid.direction.getDirection() * boid.direction.getAngle());\n      destination.normalize();\n    }\n\n    destination.multiply(new (victor__WEBPACK_IMPORTED_MODULE_1___default())(0.5, 0.5));\n    destination.add(new (victor__WEBPACK_IMPORTED_MODULE_1___default())(1, 0));\n    destination.normalize();\n    destination.multiply(new (victor__WEBPACK_IMPORTED_MODULE_1___default())(_constants__WEBPACK_IMPORTED_MODULE_7__.BOID_MAX_SPEED, _constants__WEBPACK_IMPORTED_MODULE_7__.BOID_MAX_SPEED));\n    boid.speed_vec = destination;\n  };\n\n  this.turnBoid = function (boid, direction_destination_vec, timeDelta) {\n    direction_destination_vec = direction_destination_vec.clone();\n    var act_direction_vec = boid.direction.getDirection_vector().clone();\n    var move_angle = Math.acos(direction_destination_vec.dot(act_direction_vec) / (direction_destination_vec.length() * act_direction_vec.length()));\n    var move_direction = direction_destination_vec.cross(act_direction_vec) < 0.0 ? 1 : -1;\n\n    if ((0,_misc__WEBPACK_IMPORTED_MODULE_4__.radToDeg)(move_angle) > 5) {\n      boid.direction.rotate(boid.rotation_speed * move_direction * timeDelta);\n    }\n  };\n\n  this.moveBoidForward = function (c_boid, timeDelta) {\n    var old_c_vec = c_boid.c_vec.clone();\n    var move_destination = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(c_boid.b.speed_vec.x * timeDelta, c_boid.b.speed_vec.y * timeDelta);\n    move_destination.rotate(c_boid.b.direction.getDirection() * c_boid.b.direction.getAngle());\n    c_boid.b.pos_vec.add(move_destination);\n    var new_c_vec = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(Math.floor(c_boid.b.pos_vec.x / _this.boidiverse.boidstorage.chunkSize), Math.floor(c_boid.b.pos_vec.y / _this.boidiverse.boidstorage.chunkSize));\n    old_c_vec.subtract(new_c_vec);\n\n    if (old_c_vec.x !== 0 || old_c_vec.y !== 0) {\n      _this.boidiverse.boidstorage.removeFromChunk(c_boid);\n\n      c_boid.c_vec = new_c_vec;\n\n      _this.boidiverse.boidstorage.pushOnChunk(c_boid);\n    }\n  };\n\n  this.keepBoidInsideBounds = function (boid, bounds_vec) {\n    if (boid.pos_vec.x < 0) {\n      boid.pos_vec.x = bounds_vec.x;\n    } else if (boid.pos_vec.x > bounds_vec.x) {\n      boid.pos_vec.x = 0;\n    }\n\n    if (boid.pos_vec.y < 0) {\n      boid.pos_vec.y = bounds_vec.y;\n    } else if (boid.pos_vec.y > bounds_vec.y) {\n      boid.pos_vec.y = 0;\n    }\n  };\n\n  this.keepBoidInsideBounds_bounce = function (boid, bounds_vec, timeDelta, ctx) {\n    if (_this.isInsideBounceZone(boid, bounds_vec)) {\n      if (boid.bounce0_vec === undefined) {\n        boid.bounce0_vec = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(boid.pos_vec.x, boid.pos_vec.y - bounds_vec.y);\n        boid.bounce0_m = boid.direction.getDirection_vector().y / boid.direction.getDirection_vector().x;\n      }\n\n      var x0 = boid.bounce0_vec.x;\n      var y0 = boid.bounce0_vec.y;\n      var m = boid.bounce0_m;\n      ctx.strokeStyle = \"red\";\n      ctx.beginPath();\n\n      for (var x = boid.pos_vec.x; x < boid.pos_vec.x + 500; x += 1) {\n        var y = _this.bounceFormula(x, m, x0, y0) + bounds_vec.y;\n\n        if (x === boid.pos_vec.x) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n\n      ctx.stroke();\n      ctx.strokeStyle = \"black\";\n      var moveTo_vec = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(boid.pos_vec.x + 1, _this.bounceFormula(boid.pos_vec.x + 1, m, x0, y0) + bounds_vec.y);\n      moveTo_vec.subtract(boid.pos_vec);\n\n      if ((0,_misc__WEBPACK_IMPORTED_MODULE_4__.radToDeg)(boid.direction.getAngle()) > 90) {\n        moveTo_vec.multiplyX({\n          x: -1\n        });\n      }\n\n      boid.direction = new _direction__WEBPACK_IMPORTED_MODULE_6__.Direction(moveTo_vec); //_this.turnBoid(boid, moveTo_vec, timeDelta);\n\n      boid.speed_vec = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(1, 0).multiply(new (victor__WEBPACK_IMPORTED_MODULE_1___default())(_constants__WEBPACK_IMPORTED_MODULE_7__.BOID_MAX_SPEED, _constants__WEBPACK_IMPORTED_MODULE_7__.BOID_MAX_SPEED));\n    } else {\n      if (boid.bounce0_vec !== undefined) {\n        boid.bounce0_vec = undefined;\n        boid.bounce0_m = undefined;\n      }\n\n      ctx.strokeStyle = \"red\";\n      ctx.beginPath();\n      ctx.moveTo(boid.pos_vec.x, boid.pos_vec.y);\n      ctx.lineTo(boid.pos_vec.x + boid.direction.getDirection_vector().x * 100, boid.pos_vec.y + boid.direction.getDirection_vector().y * 100);\n      ctx.stroke();\n      ctx.strokeStyle = \"black\";\n    }\n  };\n\n  this.isInsideBounceZone = function (boid, bounds_vec) {\n    return bounds_vec.y - boid.pos_vec.y <= 200;\n  };\n\n  this.bounceFormula = function (x, m, x0, y0) {\n    var mq = Math.pow(m, 2);\n    var x0q = Math.pow(x0, 2);\n    var y0q = Math.pow(y0, 2);\n    var a = 0.5 * (mq / y0);\n    var b = (m * y0 - mq * x0) / y0;\n    var c = (0.5 * mq * x0q + y0q - m * x0 * y0) / y0;\n    return a * Math.pow(x, 2) + b * x + c;\n  };\n\n  this.moveInWaves = function (boid, ctx) {\n    var y_correction = 0;\n    var first = true;\n    /*for (let x = 0; x < 1000; x += 10) {\n        let dest = new Vector(x, Math.sin(x/20) * 20);\n         dest.rotate(boid.direction.getDirection() * boid.direction.getAngle());\n        //dest.add(boid.pos_vec);\n        if(first) {\n            first = false;\n            ctx.moveTo(dest.x, dest.y);\n        }\n        else {\n            ctx.lineTo(dest.x, dest.y);\n        }\n    }*/\n\n    var dest = new (victor__WEBPACK_IMPORTED_MODULE_1___default())(boid.pos_vec.x, boid.pos_vec.y + Math.sin(boid.pos_vec.x / 20) * 20);\n    dest.add(new (victor__WEBPACK_IMPORTED_MODULE_1___default())(boid.pos_vec.x + Math.sin(boid.pos_vec.y / 20) * 20, boid.pos_vec.y));\n    dest.divide(new (victor__WEBPACK_IMPORTED_MODULE_1___default())(2, 2)); //dest.multiply(new Vector(1.5,1.5))\n\n    ctx.strokeStyle = \"red\";\n    ctx.beginPath();\n    ctx.moveTo(boid.pos_vec.x, boid.pos_vec.y);\n    ctx.lineTo(dest.x, dest.y);\n    ctx.stroke();\n    ctx.strokeStyle = \"black\";\n  };\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boidcontroller.js?");

/***/ }),

/***/ "./src/js/boidiverse.js":
/*!******************************!*\
  !*** ./src/js/boidiverse.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Boidiverse\": () => (/* binding */ Boidiverse)\n/* harmony export */ });\n/* harmony import */ var _drawer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drawer */ \"./src/js/drawer.js\");\n/* harmony import */ var _parameters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parameters */ \"./src/js/parameters.js\");\n/* harmony import */ var _boidstorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./boidstorage */ \"./src/js/boidstorage.js\");\n\n\n\nvar Boidiverse = function Boidiverse() {\n  var _this = this;\n\n  this.boidstorage = new _boidstorage__WEBPACK_IMPORTED_MODULE_2__.BoidStorage();\n\n  this.init = function (canvas_width, canvas_height) {\n    _this.boidstorage.init(canvas_width, canvas_height);\n  };\n\n  this.draw = function (ctx) {\n    _this.boidstorage.forEachBoid(function (c_boid) {\n      ctx.translate(c_boid.b.pos_vec.x, c_boid.b.pos_vec.y); //ctx.fillText(c_boid.b.id, 5, -5);\n\n      ctx.rotate(c_boid.b.direction.getDirection() * c_boid.b.direction.getAngle());\n\n      if (false) {}\n\n      ctx.fillStyle = \"#2c4047\";\n      _drawer__WEBPACK_IMPORTED_MODULE_0__.drawShape(ctx, c_boid.b.shape);\n      ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transformation\n    });\n\n    if (_parameters__WEBPACK_IMPORTED_MODULE_1__.DEBUG_DRAWGRID === true) {\n      _this.boidstorage.drawChunkGrid(ctx);\n    }\n  };\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boidiverse.js?");

/***/ }),

/***/ "./src/js/boidstorage.js":
/*!*******************************!*\
  !*** ./src/js/boidstorage.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BoidStorage\": () => (/* binding */ BoidStorage)\n/* harmony export */ });\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! victor */ \"./node_modules/victor/index.js\");\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(victor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _parameters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parameters */ \"./src/js/parameters.js\");\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./misc */ \"./src/js/misc.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\nvar BoidStorage = function BoidStorage() {\n  var _this = this;\n\n  this.boids = new Map();\n  this.chunks = [];\n  this.chunkSize = _parameters__WEBPACK_IMPORTED_MODULE_1__.DEBUG_CHUNKSIZE;\n  _this.bounds_vec = new (victor__WEBPACK_IMPORTED_MODULE_0___default())(0, 0);\n\n  this.init = function (canvas_width, canvas_height) {\n    _this.bounds_vec = new (victor__WEBPACK_IMPORTED_MODULE_0___default())(canvas_width, canvas_height);\n\n    _this.buildChunks(canvas_width, canvas_height);\n  };\n\n  this.buildChunks = function (canvas_width, canvas_height) {\n    _this.bounds_vec = new (victor__WEBPACK_IMPORTED_MODULE_0___default())(canvas_width, canvas_height);\n    _this.chunks = [];\n\n    for (var x = 0; x < canvas_width / _this.chunkSize; x++) {\n      var y_line = [];\n\n      for (var y = 0; y < canvas_height / _this.chunkSize; y++) {\n        y_line.push([]);\n      }\n\n      _this.chunks.push(y_line);\n    }\n\n    _this.forEachBoid(_this.pushOnChunk);\n\n    console.log(_this.chunks);\n  };\n\n  this.addBoid = function (boid) {\n    var chunk_vec = new (victor__WEBPACK_IMPORTED_MODULE_0___default())(Math.floor(boid.pos_vec.x / _this.chunkSize), Math.floor(boid.pos_vec.y / _this.chunkSize));\n    var c_boid = {\n      b: boid,\n      c_vec: chunk_vec\n    };\n\n    _this.boids.set(boid.id, c_boid);\n\n    _this.pushOnChunk(c_boid);\n  };\n\n  this.removeBoid = function (boid_id) {\n    var c_boid = _this.boids.get(boid_id);\n\n    _this.boids[\"delete\"](c_boid.b.id);\n\n    _this.removeFromChunk(c_boid);\n  }; //TODO: change c_boid to boid!!\n\n\n  this.forEachBoid = function (iterateFunction) {\n    _this.boids.forEach(iterateFunction);\n  };\n\n  this.getBoidsInNeighborhood = function (boid_id, maxDistance, ctx) {\n    var c_boid = _this.boids.get(boid_id);\n\n    var arr = [];\n    var overflow = Math.ceil(maxDistance / _this.chunkSize);\n\n    for (var x = 0 - (overflow - 1); x <= 2 + (overflow - 1); x++) {\n      for (var y = 0 - (overflow - 1); y <= 2 + (overflow - 1); y++) {\n        var c_x = c_boid.c_vec.x - 1 + x;\n        var c_y = c_boid.c_vec.y - 1 + y;\n\n        if (c_x >= 0 && c_x < _this.chunks.length && c_y >= 0 && c_y < _this.chunks[c_x].length) {\n          var _iterator = _createForOfIteratorHelper(_this.chunks[c_x][c_y]),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var comp_boid_id = _step.value;\n\n              if (comp_boid_id !== c_boid.b.id) {\n                var comp_c_boid = _this.boids.get(comp_boid_id);\n\n                var dis = (0,_misc__WEBPACK_IMPORTED_MODULE_2__.distance)(c_boid.b.pos_vec.x, c_boid.b.pos_vec.y, comp_c_boid.b.pos_vec.x, comp_c_boid.b.pos_vec.y);\n                var rel_pos = comp_c_boid.b.pos_vec.clone().subtract(c_boid.b.pos_vec);\n                var angle = Math.acos(rel_pos.dot(c_boid.b.direction.getDirection_vector()) / (rel_pos.length() * c_boid.b.direction.getDirection_vector().length()));\n\n                if (dis <= maxDistance && (0,_misc__WEBPACK_IMPORTED_MODULE_2__.radToDeg)(angle) <= 140) {\n                  arr.push({\n                    b: comp_c_boid.b,\n                    distance: dis\n                  });\n                  /*if(c_boid.b.id === 0 && comp_c_boid.b.id === 5) {\n                      console.log(rel_pos);\n                      console.log(radToDeg(angle));\n                  }*/\n\n                  if (false) {}\n                } else {\n                  if (false) {}\n                }\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n    }\n\n    return arr;\n  };\n\n  this.removeFromChunk = function (c_boid) {\n    if (_this.chunks[c_boid.c_vec.x] === undefined || _this.chunks[c_boid.c_vec.x][c_boid.c_vec.y] === undefined) {} else {\n      var b_index = _this.chunks[c_boid.c_vec.x][c_boid.c_vec.y].findIndex(function (e) {\n        return e === c_boid.b.id;\n      });\n\n      if (b_index > -1) {\n        _this.chunks[c_boid.c_vec.x][c_boid.c_vec.y].splice(b_index, 1);\n      }\n    }\n  };\n\n  this.pushOnChunk = function (c_boid) {\n    if (_this.chunks[c_boid.c_vec.x] === undefined || _this.chunks[c_boid.c_vec.x][c_boid.c_vec.y] === undefined) {} else {\n      _this.chunks[c_boid.c_vec.x][c_boid.c_vec.y].push(c_boid.b.id);\n    }\n  };\n\n  this.drawChunkGrid = function (ctx) {\n    for (var x = 0; x < _this.chunks.length; x++) {\n      for (var y = 0; y < _this.chunks[x].length; y++) {\n        ctx.translate(_this.chunkSize * x, _this.chunkSize * y);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, _this.chunkSize);\n        ctx.lineTo(_this.chunkSize, _this.chunkSize);\n        ctx.lineTo(_this.chunkSize, 0);\n        ctx.stroke();\n        ctx.fillText(\"c: \" + _this.chunks[x][y].length, 5, 15);\n        ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transformation\n      }\n    }\n  };\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/boidstorage.js?");

/***/ }),

/***/ "./src/js/constants.js":
/*!*****************************!*\
  !*** ./src/js/constants.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BOID_MAX_SPEED\": () => (/* binding */ BOID_MAX_SPEED),\n/* harmony export */   \"BOID_DEFAULT_SPEED_X\": () => (/* binding */ BOID_DEFAULT_SPEED_X),\n/* harmony export */   \"BOID_DEFAULT_SPEED_Y\": () => (/* binding */ BOID_DEFAULT_SPEED_Y),\n/* harmony export */   \"BOID_DEFAULT_ROTATION_SPEED\": () => (/* binding */ BOID_DEFAULT_ROTATION_SPEED),\n/* harmony export */   \"SHAPE_TRIANGLE\": () => (/* binding */ SHAPE_TRIANGLE),\n/* harmony export */   \"VECTOR_X\": () => (/* binding */ VECTOR_X)\n/* harmony export */ });\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! victor */ \"./node_modules/victor/index.js\");\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(victor__WEBPACK_IMPORTED_MODULE_0__);\n\nvar BOID_MAX_SPEED = 60;\nvar BOID_DEFAULT_SPEED_X = BOID_MAX_SPEED;\nvar BOID_DEFAULT_SPEED_Y = 0;\nvar BOID_DEFAULT_ROTATION_SPEED = 40;\nvar SHAPE_TRIANGLE = 0;\nvar VECTOR_X = new (victor__WEBPACK_IMPORTED_MODULE_0___default())(1, 0);\n\n//# sourceURL=webpack://boidiverse/./src/js/constants.js?");

/***/ }),

/***/ "./src/js/direction.js":
/*!*****************************!*\
  !*** ./src/js/direction.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Direction\": () => (/* binding */ Direction)\n/* harmony export */ });\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! victor */ \"./node_modules/victor/index.js\");\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(victor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\n\n\nvar Direction = function Direction(direction_vector) {\n  var _this = this;\n\n  this.calculateAngle = function (direction_vector) {\n    return Math.acos(direction_vector.dot(_constants__WEBPACK_IMPORTED_MODULE_1__.VECTOR_X) / (direction_vector.length() * _constants__WEBPACK_IMPORTED_MODULE_1__.VECTOR_X.length()));\n  };\n\n  this.calculateDirection = function (direction_vector) {\n    return direction_vector.cross(_constants__WEBPACK_IMPORTED_MODULE_1__.VECTOR_X) < 0.0 ? 1 : -1;\n  };\n\n  this.update = function () {\n    _this.angle = _this.calculateAngle(_this.dir_vec);\n    _this.direction = _this.calculateDirection(_this.dir_vec);\n  };\n\n  this.setDirection_vector = function (direction_vector) {\n    _this.dir_vec = direction_vector;\n\n    _this.update();\n  };\n\n  this.rotate = function (angle) {\n    _this.dir_vec.rotateDeg(angle);\n\n    _this.update();\n  };\n\n  this.getDirection_vector = function () {\n    return _this.dir_vec;\n  };\n\n  this.getAngle = function () {\n    return _this.angle;\n  };\n\n  this.getDirection = function () {\n    return _this.direction;\n  };\n\n  this.dir_vec = direction_vector;\n\n  _this.update();\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/direction.js?");

/***/ }),

/***/ "./src/js/drawer.js":
/*!**************************!*\
  !*** ./src/js/drawer.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"drawShape\": () => (/* binding */ drawShape)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/js/constants.js\");\n/* harmony import */ var _shapes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shapes */ \"./src/js/shapes.js\");\n\n\nvar drawShape = function drawShape(ctx, shape) {\n  switch (shape) {\n    case _constants__WEBPACK_IMPORTED_MODULE_0__.SHAPE_TRIANGLE:\n      _shapes__WEBPACK_IMPORTED_MODULE_1__.triangle(ctx);\n      break;\n\n    default:\n      console.log(\"Shape is not defined!\");\n      break;\n  }\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/drawer.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! victor */ \"./node_modules/victor/index.js\");\n/* harmony import */ var victor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(victor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _boid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./boid */ \"./src/js/boid.js\");\n/* harmony import */ var _boidcanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./boidcanvas */ \"./src/js/boidcanvas.js\");\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./misc */ \"./src/js/misc.js\");\n\n\n\n\nvar boids_div = document.getElementById(\"boids-js\");\nvar can = document.createElement(\"canvas\");\ncan.id = \"boids-js-canvas\";\nboids_div.appendChild(can);\nvar cb = new _boidcanvas__WEBPACK_IMPORTED_MODULE_2__.Boidcanvas(can);\ncb.init(new (victor__WEBPACK_IMPORTED_MODULE_0___default())(window.innerWidth, window.innerHeight));\n/*\nvar b = new Boid(new Vector(400,500), new Vector(-1,2));\nconsole.log(b);\nvar c = new Boid(new Vector(400,600-10), new Vector(-4,1));\nconsole.log(c);\nvar d = new Boid(new Vector(400+60,600-10), new Vector(-4,1));\nconsole.log(d);\n\nvar e = new Boid(new Vector(400+35,600+55), new Vector(-4,1));\nconsole.log(e);\n\nvar f = new Boid(new Vector(400+35,600+15), new Vector(-4,1));\nconsole.log(f);\n\nvar g = new Boid(new Vector(400-10,600+25), new Vector(-4,1));\nconsole.log(g);\n\ncb.boidiverse.boidstorage.addBoid(b);/*\ncb.boidiverse.boidstorage.addBoid(c);\ncb.boidiverse.boidstorage.addBoid(d);\ncb.boidiverse.boidstorage.addBoid(e);\ncb.boidiverse.boidstorage.addBoid(f);\ncb.boidiverse.boidstorage.addBoid(g);\n/*\ncb.boidiverse.boidstorage.addBoid(b);\ncb.boidiverse.boidstorage.addBoid(c);\ncb.boidiverse.boidstorage.addBoid(d);*/\n\n/*\nfor (let x = -5; x < 5; x++) {\nfor (let y = -5; y < 5; y++) {\nvar d = new Boid(new Vector(500 + 10*x,400 + 10*y), new Vector(x,y))\ncb.boidiverse.boidstorage.addBoid(d);\n}\n}\n/*\nfor (let s_num = 0; s_num < 5; s_num++) {\nlet swarm_pos = new Vector(Math.random() * window.innerWidth, Math.random() * window.innerHeight);\nlet swarm_direction = (Math.random()<=0.5)?-1:1;\nlet swarm_size = Math.random() * 200;\nfor (let i = 0; i < swarm_size; i++) {\ncb.boidiverse.boidstorage.addBoid(new Boid(swarm_pos.clone(), new Vector(swarm_direction, Math.random()-0.5).normalize()));\n}\n}\n*/\n\nfor (var i = 0; i < 300; i++) {\n  cb.boidiverse.boidstorage.addBoid(new _boid__WEBPACK_IMPORTED_MODULE_1__.Boid(new (victor__WEBPACK_IMPORTED_MODULE_0___default())(Math.random() * window.innerWidth, Math.random() * window.innerHeight), new (victor__WEBPACK_IMPORTED_MODULE_0___default())(Math.random() * 2 - 1, Math.random() * 2 - 1).normalize()));\n}\n\nvar spawnSwarm = function spawnSwarm(swarm_pos, swarm_direction, swarm_size) {\n  for (var _i = 0; _i < swarm_size; _i++) {\n    cb.boidiverse.boidstorage.addBoid(new _boid__WEBPACK_IMPORTED_MODULE_1__.Boid(swarm_pos.clone().add(new (victor__WEBPACK_IMPORTED_MODULE_0___default())((Math.random() - 0.5) * 100, (Math.random() - 0.5) * 100)), new (victor__WEBPACK_IMPORTED_MODULE_0___default())(swarm_direction, Math.random() * 2 - 1).normalize()));\n  }\n};\n/*\nfor (let i = 0; i < 10; i++) {\n    let swarm_pos = new Vector(Math.random() * window.innerWidth, Math.random() * window.innerHeight);\n    let swarm_direction = Math.random()*2-1;\n    let swarm_size = (Math.random() * 25) + 25;\n    spawnSwarm(swarm_pos, swarm_direction,swarm_size);\n}\n\n/*\nlet b = new Boid(new Vector(400,380), new Vector(1, 1));\ncb.boidiverse.boidstorage.addBoid(b);/*\nlet bb = new Boid(new Vector(400,420), new Vector(1, 0.25));\ncb.boidiverse.boidstorage.addBoid(bb);\n\nconsole.log(b)\nconsole.log(radToDeg(b.direction.getAngle()) + \" \" + b.direction.getDirection())\nconsole.log(bb)\nconsole.log(radToDeg(bb.direction.getAngle()) + \" \" + bb.direction.getDirection())*/\n\n//# sourceURL=webpack://boidiverse/./src/js/main.js?");

/***/ }),

/***/ "./src/js/misc.js":
/*!************************!*\
  !*** ./src/js/misc.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"degToRad\": () => (/* binding */ degToRad),\n/* harmony export */   \"radToDeg\": () => (/* binding */ radToDeg),\n/* harmony export */   \"distance\": () => (/* binding */ distance)\n/* harmony export */ });\nvar degToRad = function degToRad(deg) {\n  return deg * Math.PI / 180;\n};\nvar radToDeg = function radToDeg(rad) {\n  return rad * (180 / Math.PI);\n};\nvar distance = function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/misc.js?");

/***/ }),

/***/ "./src/js/parameters.js":
/*!******************************!*\
  !*** ./src/js/parameters.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEBUG_DRAWLINES\": () => (/* binding */ DEBUG_DRAWLINES),\n/* harmony export */   \"DEBUG_DRAWGRID\": () => (/* binding */ DEBUG_DRAWGRID),\n/* harmony export */   \"SHOW_FPS\": () => (/* binding */ SHOW_FPS),\n/* harmony export */   \"DEBUG_CHUNKSIZE\": () => (/* binding */ DEBUG_CHUNKSIZE),\n/* harmony export */   \"DEBUG_MAX_CHECK_DISTANCE\": () => (/* binding */ DEBUG_MAX_CHECK_DISTANCE),\n/* harmony export */   \"DEBUG_MAX_CHECK_ANGLE\": () => (/* binding */ DEBUG_MAX_CHECK_ANGLE),\n/* harmony export */   \"DEBUG_MAX_SWARM_DISTANCE\": () => (/* binding */ DEBUG_MAX_SWARM_DISTANCE),\n/* harmony export */   \"DEBUG_TO_NEAR_DISTANCE\": () => (/* binding */ DEBUG_TO_NEAR_DISTANCE)\n/* harmony export */ });\nvar DEBUG_DRAWLINES = true;\nvar DEBUG_DRAWGRID = false;\nvar SHOW_FPS = true;\nvar DEBUG_CHUNKSIZE = 50;\nvar DEBUG_MAX_CHECK_DISTANCE = 50;\nvar DEBUG_MAX_CHECK_ANGLE = 2.44346;\nvar DEBUG_MAX_SWARM_DISTANCE = 50;\nvar DEBUG_TO_NEAR_DISTANCE = 5;\n\n//# sourceURL=webpack://boidiverse/./src/js/parameters.js?");

/***/ }),

/***/ "./src/js/shapes.js":
/*!**************************!*\
  !*** ./src/js/shapes.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"triangle\": () => (/* binding */ triangle)\n/* harmony export */ });\nvar triangle = function triangle(ctx) {\n  ctx.beginPath();\n  ctx.moveTo(6.25, 0);\n  ctx.lineTo(0, -3.125);\n  ctx.lineTo(0, 3.125);\n  ctx.fill();\n};\n\n//# sourceURL=webpack://boidiverse/./src/js/shapes.js?");

/***/ }),

/***/ "./node_modules/victor/index.js":
/*!**************************************!*\
  !*** ./node_modules/victor/index.js ***!
  \**************************************/
/***/ ((module, exports) => {

eval("exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n\n\n//# sourceURL=webpack://boidiverse/./node_modules/victor/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;
const allElements = document.querySelectorAll('.animated-text');

// It checks if there is at least one element
if (allElements.length > 0) {
    //It runs the script for each found element
    allElements.forEach((element) => {
        const txtElement = element,
            wordsList = txtElement.getAttribute('data-words'),
            words = wordsList.split(', '); // It makes an array of words from data attribute

        let wordsCount = 0;

        entry();

        // Initial function
        function entry() {
            if (wordsCount < words.length) {
                // It runs the code for each word
                let word = words[wordsCount],
                    txtArr = word.split(''), // It makes an array of letters in the word
                    count = 0;

                txtElement.textContent = ''; // It removes the previous text from the element

                // For each letter in the array
                txtArr.forEach((letter) => {
                    // It replaces the empty space for the "non-break-space" HTML...
                    // ... This is needed to separate the words properly
                    let _letter = letter === ' ' ? '&nbsp;' : letter;

                    // It wraps every letter with a "span" and puts all they back to the element
                    txtElement.innerHTML += `<span>${_letter}</span>`;
                });

                let spans = txtElement.childNodes;

                // It sets the interval between each letter showing
                const letterInterval = setInterval(activeLetter, 70);

                function activeLetter() {
                    spans[count].classList.add('active');
                    count++;

                    if (count === spans.length) {
                        clearInterval(letterInterval);

                        // It waits 8 seconds to start erasing the word
                        setTimeout(() => {
                            eraseText();
                        }, 2000);
                    }
                }

                function eraseText() {
                    // It sets the interval between each letter hiding
                    let removeInterval = setInterval(removeLetter, 40);
                    count--;

                    function removeLetter() {
                        spans[count].classList.remove('active');
                        count--;

                        if (count === -1) {
                            clearInterval(removeInterval);
                            wordsCount++;

                            // After removing the last letter, call the initial function again
                            entry();
                        }
                    }
                }
            } else {
                // If the code reaches the last word
                // It resets the words counter...
                wordsCount = 0;
                // ...and calls the initial function again.
                entry();
            }
        }
    });
}
